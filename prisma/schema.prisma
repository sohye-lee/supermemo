// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
}
// user
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String  @default("Member")
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String   @unique 
  emailVerified DateTime? @map("email_verified")
  password      String
  image         String?
  accounts      Account[]
  sessions      Session[]
  memos         Memo[]
  questions     Question[]
  knows         Know[]
  likes         Like[]
  createdAt DateTime @default(now())

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
 

model Category {
  id  Int @id @default(autoincrement())
  name  String
  note  String? 
  memos Memo[]
  createdAt DateTime @default(now())
}

model Memo {
  id  Int     @id @default(autoincrement())
  name  String 
  type String
  topic String?
  categoryId Int 
  category  Category @relation(fields: [categoryId], references: [id])
  questions Question[]
  likes Like[]
  userId  String 
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Question {
  id  Int @id @default(autoincrement())
  question  String
  image String?
  answer  String
  memoId  Int 
  memo  Memo @relation(fields: [memoId], references: [id], onDelete: Cascade)
  userId String 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  knows Know[]
  createdAt DateTime @default(now())
  // answers Answer[]
}

// model Answer {
//   id  Int @id @default(autoincrement())
//   text  String 
//   right Boolean @default(false)
//   order Int @default(0)
//   questionId  Int
//   question  Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
//   createdAt DateTime @default(now())
// }

model Know {
  id Int @id @default(autoincrement())
  know  Boolean @default(false)
  save Boolean? @default(false)
  userId String 
  user  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionId Int 
  question  Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Like {
  id Int @id @default(autoincrement())
  memo  Memo @relation(fields: [memoId], references: [id], onDelete: Cascade)
  memoId Int 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String 
  createdAt DateTime @default(now())
}